# ┌───────────────────────────────────────────────────────┐
# │ 1. BUILD STAGE: compile your Angular SSR app         │
# └───────────────────────────────────────────────────────┘
FROM node:18-alpine AS builder

# Set working directory
WORKDIR /usr/src/app

# Copy package files and install dependencies
COPY package*.json ./
RUN npm ci --silent

# Copy source code
COPY . .

# Build for production with SSR
RUN npm run build --configuration=production

# ┌───────────────────────────────────────────────────────┐
# │ 2. PRODUCTION STAGE: ship only dist and prod deps    │
# └───────────────────────────────────────────────────────┘
FROM node:18-alpine AS runner

# Install dumb-init for proper signal handling
RUN apk add --no-cache dumb-init

# Create non-root user for security
RUN addgroup -g 1001 -S nodejs && \
    adduser -S angular -u 1001

WORKDIR /usr/src/app

# Copy package files and install only production dependencies
COPY package*.json ./
RUN npm ci --omit=dev --silent && \
    npm cache clean --force

# Copy built application from builder stage
COPY --from=builder --chown=angular:nodejs /usr/src/app/dist/base-app ./dist

# Expose the port (make sure this matches your Angular SSR config)
EXPOSE 4000

# Install curl for healthcheck (as recommended by Coolify)
RUN apk add --no-cache curl

# Add health check using curl
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
  CMD curl -f http://127.0.0.1:4000/ || exit 1

# Switch to non-root user
USER angular

# Use dumb-init to handle signals properly
ENTRYPOINT ["dumb-init", "--"]

# Start the SSR server
CMD ["node", "dist/server/server.mjs"]
